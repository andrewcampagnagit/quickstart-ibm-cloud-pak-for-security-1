AWSTemplateFormatVersion: '2010-09-09'
Description: Template for an IBM Cloud Pak for Security deployment with existing VPC. **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template. (qs-1pek09fje)
Metadata:
  AWSAMIRegionMap:
    Filters:
      RHEL76HVM:
        name: RHEL-7.6_HVM_GA-20??????-x86_64-0-Hourly2-GP2
        owner-id: "309956199498"
        architecture: x86_64
        virtualization-type: hvm
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - NumberOfAZs
          - AvailabilityZones
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
          - PublicSubnet1ID
          - PublicSubnet2ID
          - PublicSubnet3ID
          - BootNodeAccessCIDR
      - Label:
          default: DNS configuration
        Parameters:
          - DomainName
          - CPSFQDN
      - Label:
          default: Amazon EC2 configuration
        Parameters:
          - KeyPairName
      - Label:
          default: OpenShift hosts configuration
        Parameters:
          - NumberOfMaster
          - NumberOfCompute
          - MasterInstanceType
          - ComputeInstanceType
          - ClusterName
          - EnableFips
      - Label:
          default: Red Hat subscription information
        Parameters:
          - RedhatPullSecret
      - Label:
          default: IBM Cloud Pak for Security configuration
        Parameters:
          - APIUsername
          - APIKey
          - LicenseAgreement
          - Namespace
          - AdminPassword
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
          - CP4SDeploymentLogsBucketName

    ParameterLabels:
      NumberOfAZs:
        default: Number of Availability Zones
      AvailabilityZones:
        default: Availability Zones
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      PrivateSubnet2ID:
        default: Private subnet 2 ID
      PrivateSubnet3ID:
        default: Private subnet 3 ID
      PublicSubnet1ID:
        default: Public subnet 1 ID
      PublicSubnet2ID:
        default: Public subnet 2 ID
      PublicSubnet3ID:
        default: Public subnet 3 ID
      BootNodeAccessCIDR:
        default: Boot node external access CIDR
      DomainName:
        default: Domain name
      CPSFQDN:
        default: CP4S FQDN
      KeyPairName:
        default: Key pair name
      NumberOfMaster:
        default: Number of master nodes
      NumberOfCompute:
        default: Number of compute nodes
      MasterInstanceType:
        default: Master instance type
      ComputeInstanceType:
        default: Compute instance type
      ClusterName:
        default: Cluster name
      EnableFips: 
        default: Enable Fips
      RedhatPullSecret:
        default: Red Hat pull secret
      APIUsername:
        default: IBM Cloud Pak for Security API user name
      APIKey:
        default: IBM Cloud Pak for Security Entitlement Key (APIKey)
      LicenseAgreement:
        default: License agreement
      Namespace:
        default: OpenShift project
      AdminPassword:
        default: Cloud Pak for Security UI password
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      CP4SDeploymentLogsBucketName:
        default: Output S3 bucket name


Parameters:
  NumberOfAZs:  
    Default: 3
    Description: >-
      The number of Availability Zones to be used for the deployment. Keep in mind that some regions may be limited to two Availability Zones. For a single IBM Cloud Pak for CP4S cluster to be highly available, three Availability Zones are needed to avoid a single point of failure when using three, five, or seven master nodes. With fewer than three Availability Zones, one of the AZs will have more master nodes.
    Type: Number
    AllowedValues:
    - 1
    - 3  
  AvailabilityZones:
    Description: The list of Availability Zones to use for the subnets in the VPC. The Quick Start uses one or three Availability Zones and preserves the logical order you specify.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  VPCID:
    Description: The ID of your existing VPC for deployment.
    Type: AWS::EC2::VPC::Id
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: The CIDR block of the existing VPC.
    Type: String
  PrivateSubnet1ID:
    Description: The ID of the private subnet in Availability Zone 1 for the workload (e.g., subnet-a0246dcd).
    Type: String
  PrivateSubnet2ID:
    Description: The ID of the private subnet in Availability Zone 2 for the workload (e.g., subnet-b1f432cd).
    Type: String
  PrivateSubnet3ID:
    Description: The ID of the private subnet in Availability Zone 3 for the workload (e.g., subnet-b1f4a2cd).
    Type: String
  PublicSubnet1ID:
    Description: The ID of the public subnet in Availability Zone 1 for the ELB load balancer (e.g., subnet-9bc642ac).
    Type: String
  PublicSubnet2ID:
    Description: The ID of the public subnet in Availability Zone 2 for the ELB load balancer (e.g., subnet-e3246d8e).
    Type: String
  PublicSubnet3ID:
    Description: The ID of the public subnet in Availability Zone 3 for the ELB load balancer (e.g., subnet-e324ad8e).
    Type: String
  BootNodeAccessCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/x
    Description: The CIDR IP range that is permitted to access boot node instance. We recommend that you set this value to a trusted IP range. The value `0.0.0.0/0` permits all IP addresses to access. Additional values can be added post-deployment from the Amazon EC2 console.
    Type: String
  DomainName:
    Description: 'Amazon Route 53 base domain configured for your OpenShift Container Platform cluster. Name must consist of lower case alphanumeric characters and must start and end with an alphanumeric character.'
    Type: String
  CPSFQDN:
    Description: 'Any FQDN Configured for the CP4S Application.'
    Type: String
    Default: ""
  KeyPairName:
    Description: The name of an existing public/private key pair, which allows you
      to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName
  NumberOfMaster:
    Default: '3'
    Description: The desired capacity for the OpenShift master instances. Must be an odd number. For a development deployment, 1 is sufficient; for production deployments, a minimum of 3 is required.
    Type: String
    AllowedPattern: '^[13579]$|(^[1-9]+[13579]$)'
  NumberOfCompute:
    Default: '4'
    Description: The desired capacity for the OpenShift compute instances. Minimum of 3 nodes required. If the number of compute instances exceeds your Red Hat entitlement limits or AWS instance limits, the stack will fail. Choose a number that is within your limits.
    Type: Number
  MasterInstanceType:
    Default: m5.xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the OpenShift master instances.
    Type: String
  ComputeInstanceType:
    Default: m5.2xlarge
    AllowedValues:
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.24xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - r5.4xlarge
      - r5.9xlarge
      - r5.12xlarge
      - r5.18xlarge
      - r5.24xlarge
    ConstraintDescription: Must contain valid instance type
    Description: The EC2 instance type for the OpenShift compute instances.
    Type: String
  ClusterName:
    Description: Custom cluster name for kubernetes.io/cluster/tags.
    Type: String
    AllowedPattern: ^[0-9a-z-]*$
  EnableFips:
    Description: Enable Fips for Openshift
    Type: String
    AllowedValues:
      - "False"
      - "True"
    Default: "False"
  RedhatPullSecret:
    Description: Your Red Hat Network (RHN) pull secret(e.g., s3://my-bucket/path/to/portworxspec.yaml).
    Type: String
  APIUsername:
    Description: >-
       The IBM Cloud Pak for Security user name to access IBM Container Registry.
    Type: String
    Default: "cp"
  APIKey:
    Description: >-
       The IBM Cloud Pak for Security API key to access IBM Container Registry.
    Type: String 
    NoEcho: 'true'
  LicenseAgreement:
    Description: >-
      I have read and agree to the license terms for IBM Cloud Pak for Security (http://ibm.biz/cp4i-license).
    Type: String
    Default: '-' 
    AllowedValues:
      - I agree
      - '-'
    ConstraintDescription: must answer 'I agree'
  Namespace:
    Description: >-
      The OpenShift project that will be created for deploying Cloud Pak for Security. It can be any lowercase string.
    Type: String
    Default: "cp4s"
  AdminPassword:
    Description: The password for the Cloud Pak for Security web console.
    Type: String
    MinLength: '8'
    AllowedPattern: ^[^ \\']+$
    NoEcho: 'true'
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start
      or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String   
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-ibm-cp-for-security/  
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  CP4SDeploymentLogsBucketName:
    Description: 'The name of the S3 bucket where IBM Cloud Pak for Security deployment logs are to be exported. The deployment logs provide a record of the boot strap scripting actions and are useful for problem determination if the deployment fails in some way.'
    Type: String


Mappings:

  AWSAMIRegionMap:
    eu-central-1:
      RHEL76HVM: ami-062dacb006c5860f9
      COREOS: ami-0361c06cf3e935cfe
    ap-southeast-2:
      RHEL76HVM: ami-0f1ef883e90ca71c0
      COREOS: ami-0a36faab6aa0a0dea
    eu-west-1:
      RHEL76HVM: ami-0a0d2dc2f521ddce6
      COREOS: ami-0b4024fa5cb2588bd
    us-east-1:
      RHEL76HVM: ami-0916c408cb02e310b
      COREOS: ami-0d5f9982f029fbc14
    us-east-2:
      RHEL76HVM: ami-03cfe750d5ea278f5
      COREOS: ami-0c84b5c5255ec4777
    us-west-2:
      RHEL76HVM: ami-04b7963c90686dd4c
      COREOS: ami-010de485a2ee23e5e
    ap-northeast-1:
      RHEL76HVM: ami-0dc41c7805e171046
      COREOS: ami-0d236f6289c700771
    eu-west-2:
      RHEL76HVM: ami-096fbd31de0375d2a
      COREOS: ami-010de485a2ee23e5e
    eu-west-3:
      RHEL76HVM: ami-025fb013ee01513b5
      COREOS: ami-038f4ce9ea7ac7191
    ap-southeast-1:
      RHEL76HVM: ami-07cafca3788493264
      COREOS:  ami-07af688c8b65de56f
    eu-north-1:
      RHEL76HVM: ami-75941f0b
      COREOS: ami-0080eb90a48d9655e
    ap-south-1:
      RHEL76HVM: ami-021912f2c8d2c70c9
      COREOS: ami-0838c978c0390dd75
    ap-northeast-2:
      RHEL76HVM: ami-0b5425629eb18a008
      COREOS: ami-040394572427a293a
    sa-east-1:
      RHEL76HVM: ami-048b2348ac2ccfc53
      COREOS: ami-089e1a3dcc5a5fe08
    ca-central-1:
      RHEL76HVM: ami-05816666b3178f208
      COREOS: ami-01284e5815ce66a95
    us-west-1:
      RHEL76HVM: ami-0388d197bb42be9be
      COREOS: ami-0b421328859954025


Rules:
 
  LicenseAgreementRule:
    Assertions:
    - Assert:
        Fn::Contains:
        - - I agree
        - Ref: LicenseAgreement
      AssertDescription: User must agree to the terms of the license agreement.    

  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC

Conditions:
  3AZCondition: !Equals [!Ref NumberOfAZs, 3]
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']

Resources:
  CP4SIAMUser:
    Type: 'AWS::IAM::User'
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CP4SIAMUserAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref CP4SIAMUser

  CP4SSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub '{"adminPassword":"${AdminPassword}","apikey":"${APIKey}"}'

  OpenshiftSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub '{"ocpPassword":""}'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
        - PolicyName: lambda-cleanUpLambda
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:PutParameter
                  - ssm:GetParameter
                  - ssm:DeleteParameter
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - logs:FilterLogEvents
                Resource:
                  - '*' 

  BootNodeIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      Policies:
      - PolicyName: bootnode-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action: "ec2:Describe*"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:AttachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "ec2:DetachVolume"
            Resource: "*"
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub
              - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
              - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
          - Effect: "Allow"
            Action:
            - "secretsmanager:GetSecretValue"
            - "secretsmanager:UpdateSecret"
            Resource:
            - !Ref CP4SSecret  
            - !Ref AWSCredentialSecret
            - !Ref OpenshiftSecret
          - Effect: "Allow"
            Action: "s3:ListBucket"
            Resource: !Sub arn:aws:s3:::${CP4SDeploymentLogsBucketName}
          - Effect: "Allow"
            Action: "s3:PutObject"
            Resource: !Sub arn:aws:s3:::${CP4SDeploymentLogsBucketName}/*
          - Effect: Allow
            Action:
            - ssm:SendCommand
            - ssm:PutParameter
            - ssm:GetParameter
            Resource:
            - '*'

  OpenshiftURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${AWS::StackName}-OpenshiftURL"
      Type: String
      Value: "PlaceHolder"

  CP4SURL:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${AWS::StackName}-CP4SURL"
      Type: String
      Value: "PlaceHolder"

  BootnodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - Ref: "BootNodeIamRole"

  BootnodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster Bootnode Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref BootNodeAccessCIDR
      VpcId: !Ref VPCID

  AWSCredentialSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Sub 
        - '{"aws_secret_access_key":"${CP4SIAMUserAccessKey}, "aws_access_key_id":"${CP4SIAMUserSecret}"}'
        - {CP4SIAMUserAccessKey: !Ref CP4SIAMUserAccessKey, CP4SIAMUserSecret: !GetAtt [CP4SIAMUserAccessKey, SecretAccessKey]}

  BootnodeInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          Required:
            - StackPropertiesFile

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                AWS_REGION=${AWS::Region}
                AWS_STACKID="${AWS::StackId}"
                AWS_STACKNAME="${AWS::StackName}"

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}
                
            /root/.aws/credentials:
              content: 
                !Sub 
                - |  
                  [default]
                  aws_access_key_id=${CP4SIAMUserAccessKey}
                  aws_secret_access_key=${CP4SIAMUserSecret}
                - 
                  CP4SIAMUserAccessKey: !Ref CP4SIAMUserAccessKey 
                  CP4SIAMUserSecret: !GetAtt [CP4SIAMUserAccessKey, SecretAccessKey]

    Properties:
      KeyName: !Ref 'KeyPairName'
      ImageId: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", RHEL76HVM]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500
            VolumeType: gp2    
      IamInstanceProfile: !Ref BootnodeInstanceProfile
      Tags:
        - Key: Name
          Value: BootNode
      InstanceType: i3.large
      NetworkInterfaces:
      - GroupSet:
        - !Ref BootnodeSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: '0'
        DeleteOnTermination: true
        SubnetId: !Ref PublicSubnet1ID  
      UserData:
        Fn::Base64:
          !Sub 
          - |
            #!/bin/bash -x
            yum install -y git
            yum install -y wget
            yum install -y unzip
            
            git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
            export P=/quickstart-linux-utilities/quickstart-cfn-tools.source
            source $P
            qs_bootstrap_pip || qs_err " pip bootstrap failed "
            qs_aws-cfn-bootstrap || qs_err "cfn bootstrap failed"
            pip install awscli  &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            /usr/bin/cfn-init -v --stack ${AWS::StackName} --resource BootnodeInstance --configsets Required --region ${AWS::Region}
            export CP4S_QS_S3URI=s3://${QSS3BucketName}/${QSS3KeyPrefix}
            export AWS_REGION=${AWS::Region}
            export AWS_STACKID=${AWS::StackId}
            export AWS_STACKNAME=${AWS::StackName}
            export AMI_ID='${AMI_ID}'
            export CP4S_SECRET='${CP4SSecret}'
            export OCP_SECRET='${OpenshiftSecret}'
            export ICP4SInstallationCompletedURL='${ICP4SInstallationCompletedHandle}'
            mkdir -p /quickstart
            mkdir -p /ibm
            aws s3 cp ${!CP4S_QS_S3URI}scripts/bootstrap.sh /quickstart/
            chmod +x /quickstart/bootstrap.sh
            ./quickstart/bootstrap.sh
          -
            AMI_ID: !FindInMap [AWSAMIRegionMap, !Ref "AWS::Region", COREOS]
            

  CleanUpLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          import os
          import traceback
          import time
          def handler(event, context):
              responseData = {}
              try:
                  print("event_obj:",json.dumps(event))
                  print(event['RequestType'])
                  if event['RequestType'] == 'Delete':
                    print("Run unsubscribe script")
                    ssm = boto3.client('ssm',region_name=os.environ['Region'])
                    instanceID = os.environ['BootNode']
                    stackname = os.environ['StackName']
                    print instanceID
                    response = ssm.send_command(Targets=[{"Key":"instanceids","Values":[instanceID]}],
                            DocumentName="AWS-RunShellScript",
                            Parameters={"commands":["/ibm/destroy.sh %s" %(stackname)],
                                        "executionTimeout":["1200"],
                                        "workingDirectory":["/ibm"]},
                            Comment="Execute script in uninstall openshift",
                            TimeoutSeconds=120)
                    print(response)
                    current_status = "WAIT"
                    final_status = "READY"
                    parameterName = stackname+"_CleanupStatus"           
                    response = ssm.put_parameter(Name=parameterName,
                           Description="Waiting for CleanupStatus to be READY",
                           Value=current_status,
                           Type='String',
                           Overwrite=True)        
                    print(response)    
                    while(current_status!=final_status):
                      time.sleep(30) 
                      response = ssm.get_parameter(Name=parameterName)
                      parameter = response.get('Parameter')
                      current_status = parameter.get('Value')
                      print(current_status)
                    ssm.delete_parameter(Name=parameterName)    
              except Exception as e:
                print(e)
                traceback.print_exc()
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
      Environment:
        Variables:
          Region: !Ref AWS::Region
          BootNode: !Ref BootnodeInstance
          StackName: !Ref AWS::StackName
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python2.7
      Timeout: 600
  
  Cleanup :
    Type: Custom::Cleanup
    Properties:
      DependsOn: BootnodeInstance
      ServiceToken: !GetAtt 'CleanUpLambda.Arn'
  
  ICP4SInstallationCompletedHandle:
    Type: AWS::CloudFormation::WaitConditionHandle  
  
  ICP4SInstallationCompleted:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle: !Ref ICP4SInstallationCompletedHandle
      Timeout: '30000'  


Outputs:
  BootnodeInstanceId:
    Description: Bootnode Instance ID.
    Value: !Ref BootnodeInstance
  
  BootnodePublicIp:
    Description: The boot node public IP address.
    Value: !GetAtt BootnodeInstance.PublicIp
  
  CP4SWebClientURL:
    Description: CloudPak for Security web client URL.
    Value: !GetAtt CP4SURL.Value
  
  OpenshiftURLValue:
    Description: The URL for the OpenShift UI.
    Value: !GetAtt OpenshiftURL.Value
  
  OpenshiftPassword:
    Description: OpenShift password secret.
    Value: !Ref OpenshiftSecret
